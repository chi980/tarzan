pipeline {
    agent any
    tools {
        nodejs 'NodeJS 22.6.0'
    }

    environment {
        BACK_CONTAINER_NAME = "tarzan-back-container"
        BACK_IMAGE_NAME = "tarzan-back-image"
        FRONT_CONTAINER_NAME = "tarzan-front-container"
        FRONT_IMAGE_NAME = "tarzan-front-image"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build') {
            steps {
                // 이 블록에 실행할 코드가 없으면 `script` 블록을 사용하지 않거나
                // 다음과 같이 `echo` 명령어로 간단한 출력을 추가할 수 있습니다.
                echo 'Build stage is intentionally left blank as it is handled by Dockerfile.'
            }
        }

        stage('Docker Delete') {
            steps {
                script {
                    try {
                        sh 'echo "Docker Delete Start"'
                        sh "docker stop ${FRONT_CONTAINER_NAME} || true"
                        sh "docker rm -f ${FRONT_CONTAINER_NAME} || true"
                    } catch (Exception e) {
                        echo "Docker container ${FRONT_CONTAINER_NAME} does not exist. skip"
                    }
                    try {
                        sh "docker image rm ${FRONT_IMAGE_NAME} || true"
                    } catch (Exception e) {
                        echo "Docker image ${FRONT_IMAGE_NAME} does not exist. skip"
                    }
                }
            }
        }

        stage('Dockerizing') {
            steps {
                script {
                    sh 'ls'
                    sh "docker ps"
                    dir('Frontend') {
                        sh "docker build -t ${FRONT_IMAGE_NAME} -f Dockerfile ."
                    }
                    sh "docker images"
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sh "docker run --name ${FRONT_CONTAINER_NAME} -d -p 5173:80 ${FRONT_IMAGE_NAME}"
                    sh "docker ps"
                }
            }
        }
    }
}
