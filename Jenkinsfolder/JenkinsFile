pipeline {
    agent any
    tools {
        nodejs 'NodeJS 22.6.0' // NodeJS 설치
    }
    
    environment {
        FRONT_CONTAINER_NAME = "tarzan-front-container"
        FRONT_IMAGE_NAME = "tarzan-front-image"

        
        BACK_CONTAINER_NAME = "tarzan-back-container"
        BACK_IMAGE_NAME = "tarzan-back-image"

        SPRING_PROFILES_ACTIVE = 'prod' // dev 프로파일을 활성화
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm  // 소스 코드 checkout
            }
        }

        stage('Backend Build') {
            steps {
                script {
                    dir('Backend') {
                        dir('tarzan') {
                            sh 'chmod +x gradlew'
                            sh './gradlew clean build'
                            sh 'ls -al ./build'
                        }
                    }
                }
            }
        }

        stage('Docker Delete') {
            steps {
                script {
                    try {
                        sh "docker stop ${FRONT_CONTAINER_NAME} || true"
                        sh "docker rm -f ${FRONT_CONTAINER_NAME} || true"
                    } catch (Exception e) {
                        echo "Docker container ${FRONT_CONTAINER_NAME} does not exist. Skip."
                    }
                    try {
                        sh "docker image rm ${FRONT_IMAGE_NAME} || true"
                    } catch (Exception e) {
                        echo "Docker image ${FRONT_IMAGE_NAME} does not exist. Skip."
                    }

                    try {
                        sh 'echo "Docker Delete Start"'
                        sh "docker stop ${BACK_CONTAINER_NAME} || true"
                        sh "docker rm -f ${BACK_CONTAINER_NAME} || true"
                    } catch (Exception e) {
                        echo "Docker container ${BACK_CONTAINER_NAME} does not exist. skip"
                    }
                    try {
                        sh "docker image rm ${BACK_IMAGE_NAME} || true"
                    } catch (Exception e) {
                        echo "Docker image ${BACK_IMAGE_NAME} does not exist. skip"
                    }
                }
            }
        }

        stage('Dockerize') {
            steps {
                script {
                    // Docker 이미지 빌드
                    dir('Frontend') {
                        dir('tarzan'){
                            sh "docker build -t ${FRONT_IMAGE_NAME} -f Dockerfile ."
                        }
                    }

                    // dir('Backend') {
                    //     dir('tarzan') {
                    //         // Docker build는 이 시점에 jar 파일이 생성된 후에 실행되어야 함
                    //         sh "docker build -t ${BACK_IMAGE_NAME} -f Dockerfile ."
                    //         sh "docker images"
                    //         sh 'echo "images build 성공!"'
                    //     }
                    // }

                    dir('Backend') {
                        dir('tarzan') {
                            withCredentials([
                                string(credentialsId: 'DB_URL', variable: 'DB_URL'),
                                usernamePassword(credentialsId: 'DB-CREDENTIALS', usernameVariable: 'DB_USERNAME', passwordVariable: 'DB_PASSWORD'),
                                usernamePassword(credentialsId: 'GOOGLE_CREDENTIALS', usernameVariable: 'GOOGLE_CLIENT_ID', passwordVariable: 'GOOGLE_CLIENT_SECRET'),
                                usernamePassword(credentialsId: 'KAKAO_CREDENTIALS', usernameVariable: 'KAKAO_CLIENT_ID', passwordVariable: 'KAKAO_CLIENT_SECRET'),
                                string(credentialsId: 'JWT_SECRET_KEY', variable: 'JWT_SECRET_KEY'),
                                string(credentialsId: 'VWORLD_API_KEY', variable: 'VWORLD_API_KEY'),
                                string(credentialsId: 'SEOUL_API_KEY', variable: 'SEOUL_API_KEY')
                            ]) {
                                sh """
                                docker build \
                                --build-arg DB_URL=${DB_URL} \
                                --build-arg DB_USERNAME=${DB_USERNAME} \
                                --build-arg DB_PASSWORD=${DB_PASSWORD} \
                                --build-arg GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID} \
                                --build-arg GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET} \
                                --build-arg KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID} \
                                --build-arg KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET} \
                                --build-arg JWT_SECRET_KEY=${JWT_SECRET_KEY} \
                                --build-arg VWORLD_API_KEY=${VWORLD_API_KEY} \
                                --build-arg SEOUL_API_KEY=${SEOUL_API_KEY} \
                                -t ${BACK_IMAGE_NAME} -f Dockerfile .
                                """
                                sh "docker images"
                                sh 'echo "images build 성공!"'
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Docker 컨테이너 실행
                    sh "docker run --name ${FRONT_CONTAINER_NAME} -d -p 5173:80 ${FRONT_IMAGE_NAME}"
                    sh "docker run --name ${BACK_CONTAINER_NAME} -d -p 8080:8080 ${BACK_IMAGE_NAME}"
                    // 실행 중인 Docker 컨테이너 확인
                    sh "docker ps"
                }
            }
        }
    }
}
